# Comprehensive security scanning workflow
# This workflow runs multiple security scans including SAST, dependency scanning, and container scanning

name: "Security Scanning"

on:
  # Temporarily disabled to prevent email spam
  # push:
  #   branches: [ "main", "develop" ]
  # pull_request:
  #   branches: [ "main" ]
  # schedule:
  #   # Run security scans daily at 3 AM UTC
  #   - cron: '0 3 * * *'
  workflow_dispatch: # Allow manual runs only

jobs:
  # SAST (Static Application Security Testing)
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=moderate --json > npm-audit-results.json || true

    - name: Run .NET security check
      run: dotnet list package --vulnerable --include-transitive

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-scan-results
        path: |
          npm-audit-results.json
        retention-days: 30

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        cd Docker/Docker-Web
        docker build -f Dockerfile.api.simple -t enterprise-toolkit-api .
        docker build -f Dockerfile.web -t enterprise-toolkit-web .

    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'enterprise-toolkit-api'
        format: 'sarif'
        output: 'trivy-container-results.sarif'

    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-container-results.sarif'

  # Secrets scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run license checker
      run: |
        npm install -g license-checker
        license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense' --excludePrivatePackages

  # Security policy check
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for security policy
      run: |
        if [ ! -f "SECURITY.md" ]; then
          echo "⚠️ SECURITY.md file not found"
          exit 1
        else
          echo "✅ SECURITY.md file found"
        fi

    - name: Validate security policy format
      run: |
        # Check if SECURITY.md contains required sections
        if grep -q "## Supported Versions" SECURITY.md && \
           grep -q "## Reporting a Vulnerability" SECURITY.md; then
          echo "✅ SECURITY.md format is valid"
        else
          echo "❌ SECURITY.md format is invalid"
          exit 1
        fi
