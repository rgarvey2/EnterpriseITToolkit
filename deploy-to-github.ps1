# GitHub Deployment Script for Enterprise IT Toolkit
# This script helps deploy your application to GitHub

Write-Host "=== GITHUB DEPLOYMENT SETUP ===" -ForegroundColor Cyan
Write-Host "Timestamp: $(Get-Date)" -ForegroundColor Gray

# Check if Git is installed
Write-Host "`nChecking Git installation..." -ForegroundColor Yellow
try {
    $gitVersion = git --version
    Write-Host "✅ Git is installed: $gitVersion" -ForegroundColor Green
} catch {
    Write-Host "❌ Git is not installed. Please install Git first." -ForegroundColor Red
    Write-Host "Download from: https://git-scm.com/download/win" -ForegroundColor Yellow
    exit 1
}

# Check if GitHub CLI is installed
Write-Host "`nChecking GitHub CLI installation..." -ForegroundColor Yellow
try {
    $ghVersion = gh --version
    Write-Host "✅ GitHub CLI is installed: $($ghVersion.Split("`n")[0])" -ForegroundColor Green
} catch {
    Write-Host "⚠️  GitHub CLI not installed. Installing via winget..." -ForegroundColor Yellow
    try {
        winget install --id GitHub.cli
        Write-Host "✅ GitHub CLI installed successfully" -ForegroundColor Green
    } catch {
        Write-Host "❌ Failed to install GitHub CLI. Please install manually." -ForegroundColor Red
        Write-Host "Download from: https://cli.github.com/" -ForegroundColor Yellow
    }
}

# Initialize Git repository if not already initialized
Write-Host "`nChecking Git repository status..." -ForegroundColor Yellow
if (-not (Test-Path ".git")) {
    Write-Host "Initializing Git repository..." -ForegroundColor White
    git init
    Write-Host "✅ Git repository initialized" -ForegroundColor Green
} else {
    Write-Host "✅ Git repository already exists" -ForegroundColor Green
}

# Create .gitignore file
Write-Host "`nCreating .gitignore file..." -ForegroundColor Yellow
$gitignoreContent = @"
# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# Visual Studio
.vs/
*.user
*.userosscache
*.sln.docstates
*.suo
*.userprefs
*.usertasks
*.cache
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/
**/Properties/launchSettings.json

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage
.grunt

# Bower dependency directory
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons
build/Release

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production
.env.local
.env.development.local
.env.test.local
.env.production.local

# parcel-bundler cache
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Editor directories and files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Docker
.dockerignore
docker-compose.override.yml

# Security
*.key
*.pem
*.p12
*.pfx

# Database
*.db
*.sqlite
*.sqlite3

# Backup files
*.bak
*.backup
*.old

# Enterprise IT Toolkit specific
StandaloneApiServer/
Docker/Docker-Web/api-server/
*.exe
*.dll
*.pdb
*.config
*.xml
*.json
!package.json
!webpack.config.js
!tsconfig.json
!*.csproj
!*.sln
!*.cs
!*.html
!*.css
!*.js
!*.md
!*.ps1
!*.bat
!*.yml
!*.yaml
!*.sql
!*.php
!*.ico
!*.png
!*.jpg
!*.jpeg
!*.gif
!*.svg
!*.woff
!*.woff2
!*.ttf
!*.eot
"@

$gitignoreContent | Out-File -FilePath ".gitignore" -Encoding UTF8
Write-Host "✅ .gitignore file created" -ForegroundColor Green

# Create README.md if it doesn't exist
if (-not (Test-Path "README.md")) {
    Write-Host "`nCreating README.md..." -ForegroundColor Yellow
    $readmeContent = @"
# Enterprise IT Toolkit

A comprehensive enterprise-grade IT management and monitoring solution with both desktop and web interfaces.

## Features

- **System Health Monitoring** - Real-time system performance tracking
- **Network Diagnostics** - Comprehensive network analysis and troubleshooting
- **Security Management** - Advanced security monitoring and threat detection
- **Performance Analytics** - Detailed performance metrics and reporting
- **Automation Tools** - Automated IT management and maintenance
- **ML Analytics** - Machine learning-powered insights and predictions
- **Reporting System** - Comprehensive reporting and documentation

## Architecture

- **Desktop Application** - Windows Forms application for local management
- **Web Interface** - Modern web application accessible from any device
- **API Server** - RESTful API for data access and integration
- **Docker Support** - Containerized deployment with Docker Compose
- **Database Integration** - PostgreSQL and Redis for data persistence
- **Monitoring Stack** - Prometheus and Grafana for observability

## Quick Start

### Desktop Application
\`\`\`bash
dotnet run
\`\`\`

### Web Application
\`\`\`bash
npm install
npm run serve
\`\`\`

### Docker Deployment
\`\`\`bash
cd Docker/Docker-Web
docker-compose -f docker-compose.complete-enterprise.yml up -d
\`\`\`

## Access Points

- **Web Interface**: http://localhost:3000
- **API Server**: http://localhost:5001
- **PHP Admin Panel**: http://localhost:8080
- **Grafana Dashboard**: http://localhost:3001
- **Prometheus**: http://localhost:9090

## Requirements

- .NET 8.0
- Node.js 18+
- Docker Desktop
- Windows 10/11

## License

MIT License

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Submit a pull request

## Support

For support and questions, please open an issue on GitHub.
"@

    $readmeContent | Out-File -FilePath "README.md" -Encoding UTF8
    Write-Host "✅ README.md created" -ForegroundColor Green
}

# Add all files to Git
Write-Host "`nAdding files to Git..." -ForegroundColor Yellow
git add .
Write-Host "✅ Files added to Git" -ForegroundColor Green

# Check if there are any changes to commit
$gitStatus = git status --porcelain
if ($gitStatus) {
    Write-Host "`nCommitting changes..." -ForegroundColor Yellow
    git commit -m "Initial commit: Enterprise IT Toolkit

- Desktop application with Windows Forms
- Web interface with modern UI
- API server with RESTful endpoints
- Docker containerization
- Database integration (PostgreSQL, Redis)
- Monitoring stack (Prometheus, Grafana)
- Security enhancements
- Performance optimizations
- Comprehensive documentation"
    Write-Host "✅ Changes committed" -ForegroundColor Green
} else {
    Write-Host "✅ No changes to commit" -ForegroundColor Green
}

Write-Host "`n=== GITHUB REPOSITORY SETUP ===" -ForegroundColor Cyan
Write-Host "Next steps to create GitHub repository:" -ForegroundColor Yellow
Write-Host "1. Go to https://github.com/new" -ForegroundColor White
Write-Host "2. Create a new repository named 'EnterpriseITToolkit'" -ForegroundColor White
Write-Host "3. Don't initialize with README (we already have one)" -ForegroundColor White
Write-Host "4. Copy the repository URL" -ForegroundColor White
Write-Host "5. Run the following commands:" -ForegroundColor White
Write-Host "   git remote add origin <repository-url>" -ForegroundColor Gray
Write-Host "   git branch -M main" -ForegroundColor Gray
Write-Host "   git push -u origin main" -ForegroundColor Gray

Write-Host "`n=== AUTOMATED GITHUB SETUP ===" -ForegroundColor Cyan
$useGitHubCLI = Read-Host "Do you want to create the GitHub repository automatically? (y/N)"

if ($useGitHubCLI -eq 'y' -or $useGitHubCLI -eq 'Y') {
    Write-Host "`nCreating GitHub repository..." -ForegroundColor Yellow
    
    try {
        # Authenticate with GitHub CLI
        gh auth login
        
        # Create repository
        gh repo create EnterpriseITToolkit --public --description "Enterprise IT Management and Monitoring Solution" --source=. --remote=origin --push
        
        Write-Host "✅ GitHub repository created and pushed successfully!" -ForegroundColor Green
        Write-Host "Repository URL: https://github.com/$(gh api user --jq .login)/EnterpriseITToolkit" -ForegroundColor Green
        
    } catch {
        Write-Host "❌ Error creating GitHub repository: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "Please create the repository manually and follow the steps above." -ForegroundColor Yellow
    }
}

Write-Host "`n=== DEPLOYMENT COMPLETE ===" -ForegroundColor Green
Write-Host "Your Enterprise IT Toolkit is ready for GitHub deployment!" -ForegroundColor White
